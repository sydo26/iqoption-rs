name: CI
on:
  pull_request:
  push:
    branches:
      - main

env:
  RUST_BACKTRACE: full
  CI: 1
  CARGO_INCREMENTAL: 0
  RUST_LOG: "debug"

jobs:
  test:
    name: Test (${{ matrix.os }}) - Rust ${{ matrix.rust }}
    needs: [fmt, check]
    strategy:
      fail-fast: false
      matrix:
        rust:
          - nightly
          - beta
          - stable
        os:
          - ubuntu-latest
          - macos-11
          - windows-latest

        include:
          - rust: nightly
            benches: true

    runs-on: ${{ matrix.os }}

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Use cache to speed up builds
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            target
            Cargo.lock
          key: test-${{ matrix.rust }}-${{ matrix.os }}-rustc-v1

      # Install Rust toolchain
      - name: Install Rust (${{ matrix.rust }})
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}

      # Execute cargo test
      - name: Run cargo test
        run: |
          cargo test --color always


  check-license:
    name: Check License
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Use cache to speed up builds
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            target
            Cargo.lock
          key: check-license-ubuntu-v1

      # Install Rust toolchain
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      # Install required tools
      - name: Install cargo-deny
        run: |
          cargo install cargo-deny

      # Execute deny check
      - name: Check Licenses
        run: | 
          cargo deny check

  fmt:
    name: Check Formatting
    env:
      RUST_LOG: "0"
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Install Rust toolchain
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt

      # Execute rustfmt
      - name: Check formating with rustfmt
        run: |
          cargo fmt --all -- --check

  check:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-11
          - windows-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Install rust toolchain
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      # Use cache to speed up builds
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            target
            Cargo.lock
          key: ${{ runner.os }}-rustc-v1

      # Ensure that all components are compilable.
      - name: Run cargo check for all targets
        run: cargo check --color always --all --all-targets

  msrv:
    name: Check MSRV (Minimum Supported Rust Version)
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Get MSRV from package metadata
      - name: Get MSRV from package metadata
        id: metadata
        run: |
          cargo metadata --no-deps --format-version 1 |
              jq -r '"msrv=" + (.packages[] | select(.name == "iqoption-rs")).rust_version' >> $GITHUB_OUTPUT

      # Install Rust toolchain
      - name: Install Rust (${{ steps.metadata.outputs.msrv }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.metadata.outputs.msrv }}

      # Execute cargo check in iqoption-rs crate
      - name: Cargo check
        run: cargo check -p iqoption-rs